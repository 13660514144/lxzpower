<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HelperTools</name>
    </assembly>
    <members>
        <member name="M:HelperTools.CompressByte.Compress(System.Byte[])">
            <summary>
            Compress
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.CompressByte.Decompress(System.Byte[])">
            <summary>
            Decompress
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.CompressByte.ZAZIP(System.String,System.String,System.Boolean)">
            <summary>
            ZipArchive压缩
            </summary>
            <param name="str_ZipFilePath">压缩文件存放的路径（如：/UploadFiles/quber.zip）</param>
            <param name="str_OldFilePath">压缩文件的上级文件夹名称路径（如：/UploadFiles/）</param>
            <param name="bl_IsDeleteZip">是否首先删除已经存在的zip压缩包</param>
        </member>
        <member name="M:HelperTools.CompressByte.GetAllFileName(System.String)">
            <summary>
            获取文件夹下的所有文件名称
            </summary>
            <param name="str_FilePath">文件夹路径名称（如：/UploadFiles/）</param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.CompressByte.EncodeBase64(System.String,System.String)">
            <summary>
            Base64编码
            </summary>
            <param name="code_type"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.CompressByte.DecodeBase64(System.String,System.String)">
            <summary>
            Base64解码
            </summary>
            <param name="code_type"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.CompressByte.GetGuid">
             <summary>
            返回GUID
             </summary>
             <returns></returns>
        </member>
        <member name="M:HelperTools.CompressByte.GetRand">
            <summary>
            1-10000随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:HelperTools.CompressByte.GetCustomCode">
            <summary>
            自编码算法器 按年月是时分秒+随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:HelperTools.DataHandle.ConvertDataType(System.String)">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:HelperTools.DataHandle.ConvertSQLType(System.String)">
            <summary>
            SQL值 类型转换
            </summary>
            <param name="ColType"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.DataHandle.ClearResult(HelperTools.DataHandle.WorkResult,System.Boolean)">
            <summary>
            清理过程变量
            </summary>
            <param name="Work"></param>
            <returns></returns>
        </member>
        <member name="T:HelperTools.DataHandle.ListObject">
            <summary>
            列表对象，需要返回datatable 和列表字段配置
            </summary>
        </member>
        <member name="T:HelperTools.DataHandle.Paging">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="T:HelperTools.DataHandle.WorkResult">
            <summary>
            过程操作变量集合
            </summary>
        </member>
        <member name="T:HelperTools.DataHandle.SqlParaResult">
            <summary>
            多表多记录参数集合
            </summary>
        </member>
        <member name="T:HelperTools.DataHandle.SqlEnity">
            <summary>
            多表多记录参数集合
            </summary>
        </member>
        <member name="T:HelperTools.DataHandle.SqlPara">
            <summary>
            单表参数/单记录参数
            </summary>
        </member>
        <member name="T:HelperTools.DataHandle.SQLtype">
            <summary>
            值参数属性
            </summary>
        </member>
        <member name="M:HelperTools.DataHandle.GetTbAlias(System.Int32)">
            <summary>
            联表别名计算
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.DataHandle.GetResult(System.String,System.String,System.String,System.Object,System.String)">
            <summary>
            公共返回JsonResult 封装
            </summary>
            <param name="scuess">1执行成功 0执行失败</param>
            <param name="Msg">返回信息</param>
            <param name="IsResult">1有返回数据 0无返回数据</param>
            <param name="Dt">返回的数据</param>
            <returns></returns>
        </member>
        <member name="T:HelperTools.DeleDynamic">
            <summary>
            动态对象
            </summary>
            <param name="sender"></param>
            <param name="pramas"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.FileHelper.FileCreate(System.String,System.String,System.String)">
            <summary>
            写文件 重写覆盖
            </summary>
        </member>
        <member name="M:HelperTools.FileHelper.ReadFile(System.String)">
            <summary>
            读文件
            </summary>
        </member>
        <member name="M:HelperTools.FileHelper.FileToBase64(System.String)">
            <summary>
            将文件转换成Base64格式
            </summary>
        </member>
        <member name="M:HelperTools.FileHelper.Base64ToImage(System.String)">
            <summary>
            将Base64字符串转换为Image对象
            </summary>
            <param name="base64Str">base64字符串</param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.FileHelper.ListTreeShow(System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件函数
            </summary>
            <param name="theDir">指定目录</param>
            <param name="nLevel">默认起始值,调用时,一般为0</param>
            <param name="Rn">用于迭加的传入值,一般为空</param>
            <param name="tplPath">默认选择模板名称</param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.HostReqModel.CashSetUserKey(HelperTools.HostReqModel.HostUrl,HelperTools.HostReqModel.DomainUserKey)">
            <summary>
            设置用户KEY缓存在REDIS
            </summary>
            <param name="HostKey"></param>
            <param name="UserKey"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.HostReqModel.CashGetUserKey(HelperTools.HostReqModel.HostUrl,HelperTools.HostReqModel.DomainUserKey)">
            <summary>
            取当前用户带请求域的KEY含TOKEN
            </summary>
            <param name="HostKey"></param>
            <param name="UserKey"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.HostReqModel.IdentChg(HelperTools.HostReqModel.HostUrl,HelperTools.HostReqModel.DomainUserKey)">
            <summary>
            用户较验
            </summary>
            <param name="HostKey"></param>
            <param name="UserKey"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.HostReqModel.IdentyLogin(System.String,System.String,System.String)">
            <summary>
            用户登录中心
            </summary>
            <param name="Host"></param>
            <param name="Url"></param>
            <param name="JsonUser"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.HostReqModel.IdentyOtherDomainUser(System.String,System.String,System.String)">
            <summary>
            同用户不同域，获取用户数据
            </summary>
            <param name="Host"></param>
            <param name="JsonUser"></param>
            <param name="Url"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.HostReqModel.GuestPost(System.String,System.String,System.String)">
            <summary>
            公共同步提交POST+
            </summary>
            <param name="Host"></param>
            <param name="Url"></param>
            <param name="PostString"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.HostReqModel.SendHttpRequest(System.String,System.String)">
            <summary>
            HttpWebRequerst 模式
            </summary>
            <param name="requestURI"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.HostReqModel.GuestPostAsync(System.String,System.String,System.String)">
            <summary>
            公共异步提交POST
            </summary>
            <param name="Host"></param>
            <param name="Url"></param>
            <param name="PostString"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.HostReqModel.GetApiUrl(System.String)">
            <summary>
            根据服务CODE取得API URLS
            </summary>
            <param name="Code"></param>
            <returns></returns>
        </member>
        <member name="T:HelperTools.RedisCommon">
            <summary>
            Redis操作类
            老版用的是ServiceStack.Redis。
            Net Core使用StackExchange.Redis的nuget包
            </summary>
        </member>
        <member name="M:HelperTools.RedisCommon.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="db"></param>
            <param name="connectStr"></param>
        </member>
        <member name="P:HelperTools.RedisCommon.CacheConnection">
            <summary>
            缓存数据库，数据库连接
            </summary>
        </member>
        <member name="M:HelperTools.RedisCommon.GetConn">
            <summary>
            从配置获取数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="P:HelperTools.RedisCommon.CacheRedis">
            <summary>
            缓存数据库
            </summary>
        </member>
        <member name="M:HelperTools.RedisCommon.StringSet(System.String,System.String)">
            <summary>
            单条存值
            </summary>
            <param name="key">key</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HelperTools.RedisCommon.StringSet(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.RedisCommon.StringSet(System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}[])">
            <summary>
            保存多个key value
            </summary>
            <param name="arr">key</param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.RedisCommon.StringSetMany(System.String[],System.String[])">
            <summary>
            批量存值
            </summary>
            <param name="keysStr">key</param>
            <param name="valuesStr">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:HelperTools.RedisCommon.SetStringKey``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.RedisCommon.StringAppend(System.String,System.String)">
            <summary>
            追加值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:HelperTools.RedisCommon.GetStringKey(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.RedisCommon.StringGet(System.String)">
            <summary>
            根据Key获取值
            </summary>
            <param name="key">键值</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:HelperTools.RedisCommon.GetStringKey(System.Collections.Generic.List{StackExchange.Redis.RedisKey})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.RedisCommon.StringGetMany(System.String[])">
            <summary>
            批量获取值
            </summary>
        </member>
        <member name="M:HelperTools.RedisCommon.GetStringKey``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.RedisCommon.KeyDelete(System.String)">
            <summary>
            删除单个key
            </summary>
            <param name="key">redis key</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:HelperTools.RedisCommon.KeyDelete(StackExchange.Redis.RedisKey[])">
            <summary>
            删除多个key
            </summary>
            <param name="keys">rediskey</param>
            <returns>成功删除的个数</returns>
        </member>
        <member name="M:HelperTools.RedisCommon.KeyExists(System.String)">
            <summary>
            判断key是否存储
            </summary>
            <param name="key">redis key</param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.RedisCommon.KeyRename(System.String,System.String)">
            <summary>
            重新命名key
            </summary>
            <param name="key">就的redis key</param>
            <param name="newKey">新的redis key</param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.RedisCommon.HaseDelete(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue)">
            <summary>
            删除hasekey
            </summary>
            <param name="key"></param>
            <param name="hashField"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.RedisCommon.HashRemove(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.RedisCommon.SetExpire(System.String,System.DateTime)">
            <summary>
            设置缓存过期
            </summary>
            <param name="key"></param>
            <param name="datetime"></param>
        </member>
        <member name="M:HelperTools.HelpConst.GetConstLastCode(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            获取最后一个常量编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HelperTools.HelpConst.CalculLastCode(System.String,System.String)">
            <summary>
            计算根节点
            </summary>
            <param name="Code"></param>
            <param name="SourceCode"></param>
            <returns></returns>
        </member>
        <member name="T:HelperTools.DalFactory">
            <summary>
            数据库操作工厂类
            </summary>
        </member>
        <member name="M:HelperTools.DalFactory.CreateDal(System.String,System.String)">
            <summary>
            创建Dal
            </summary>
            <param name="databaseType">数据库类型，如SQLite、MySql</param>
        </member>
        <member name="T:HelperTools.IDal">
            <summary>
            数据库操作接口
            </summary>
        </member>
        <member name="M:HelperTools.IDal.GetAllTables">
            <summary>
            获取数据库名
            </summary>
        </member>
        <member name="M:HelperTools.IDal.GetAllColumns(System.String)">
            <summary>
            获取表的所有字段名及字段类型
            </summary>
        </member>
        <member name="M:HelperTools.IDal.ConvertDataType(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="T:HelperTools.MSSQLDal">
            <summary>
            MSSQL数据库DAL
            </summary>
        </member>
        <member name="M:HelperTools.MSSQLDal.GetAllTables">
            <summary>
            获取所有表信息
            </summary>
        </member>
        <member name="M:HelperTools.MSSQLDal.GetAllColumns(System.String)">
            <summary>
            获取表的所有字段名及字段类型
            </summary>
        </member>
        <member name="M:HelperTools.MSSQLDal.ConvertDataType(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="T:HelperTools.MSSQLHelper">
            <summary>
            操作类
            </summary>
        </member>
        <member name="F:HelperTools.MSSQLHelper.connectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:HelperTools.MSSQLHelper.ExecuteSql(System.String)">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:HelperTools.MSSQLHelper.Query(System.String)">
            <summary>
            执行查询语句，返回DataTable
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:HelperTools.MSSQLHelper.Query(System.String,HelperTools.DataHandle.SqlPara)">
            <summary>
            执行查询语句，返回DataTable
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:HelperTools.MSSQLHelper.DataReaderToDataTable(System.Data.SqlClient.SqlDataReader)">
            <summary>
            SqlDataReader 转成 DataTable
            源需要是结果集
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.MsFormQuery.QuerySingle(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            单表模式（带附表）
            </summary>
            <param name="Struct"></param>
            <param name="WherePara"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.MsFormQuery.QueryMany(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            多表模式（带附表、子表）
            </summary>
            <param name="Struct"></param>
            <param name="WherePara"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.MsIns.MsInsMany(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            多表参数模式 数据增加方法
            </summary>
            <param name="Struct">主表结构配置</param>
            <param name="JsonData">客户端上传数据</param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.MsIns.MsInsSingle(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            单表模式  参数模式
            </summary>
            <param name="DB"></param>
            <param name="TB"></param>
            <param name="Struct">表结构JSON对象</param>
            <param name="JsonData"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.MsIns.MsInsSingleNoCode(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            不生成自编码方法，用在常量、菜单、模块配置
            </summary>
            <param name="Struct"></param>
            <param name="JsonData"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.MsIns.MsInsSyslog(System.String,Newtonsoft.Json.Linq.JObject,System.String,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            写操作日志
            </summary>
            <param name="JsonData"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.MsListQuery.GuestListFields(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            公共列表  参数查询
            </summary>
            <param name="DB"></param>
            <param name="TB"></param>
            <param name="Struct"></param>
            <param name="JsonData"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.MsListQuery.GetSubList(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            主子表关联子表查询
            </summary>
            <param name="Struct"></param>
            <param name="JsonData"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.MsListQuery.GetLogList(System.String)">
            <summary>
            关联主表获取操作日志
            </summary>
            <param name="JsonData"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.MsListQuery.GetAttachList(System.String)">
            <summary>
            关联主表获取文件附件
            </summary>
            <param name="JsonData"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.MsUp.MsUpSingle(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            单表模式  参数模式
            </summary>
            <param name="DB"></param>
            <param name="TB"></param>
            <param name="Struct"></param>
            <param name="JsonData"></param>
            <returns></returns>
        </member>
        <member name="M:HelperTools.MsUp.MsUpMany(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            多表模式  参数模式
            </summary>
            <param name="DB"></param>
            <param name="TB"></param>
            <param name="Struct"></param>
            <param name="JsonData"></param>
            <returns></returns>
        </member>
        <member name="T:HelperTools.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:HelperTools.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:HelperTools.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
    </members>
</doc>
